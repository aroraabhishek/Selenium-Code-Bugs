List
List is an ordered collection of objects in which duplicate values can be stored. Since List preserves the insertion 
order it allows positional access and insertion of elements. List Interface is implemented by ArrayList, LinkedList, Vector 
and Stack classes.

Creating List Objects: 
List is an interface, we can create instance of List in following ways:

List a = new ArrayList();
List b = new LinkedList();
List c = new Vector(); 
List d = new Stack(); 
Generic List Object:
After the introduction of Generics in Java 1.5, it is possible to restrict the type of object that can be stored in the List. 
We can declare type safe List in following way:

// Obj is type of object to be stored in List.
List<Obj> list = new List<Obj> ();  

ArrayList
ArrayList is a part of collection framework and is present in java.util package. It provides us dynamic arrays in 
Java. Though, it may be slower than standard arrays but can be helpful in programs where lots of manipulation in the 
array is needed.

-ArrayList inherits AbstractList class and implements List interface.
-ArrayList is initialized by a size, however the size can increase if collection grows or shrunk if objects are removed from 
the collection.
-Java ArrayList allows us to randomly access the list.
-ArrayList can not be used for primitive types, like int, char, etc. We need a wrapper class for such cases (see this for details).
-ArrayList in Java can be seen as similar to vector in C++.


Let us look at the code to create generic ArrayList-

// Creating generic integer ArrayList
ArrayList<Integer> arrli = new ArrayList<Integer>();
// Java program to demonstrate working of ArrayList in Java
import java.io.*;
import java.util.*;
 
class arrayli
{
    public static void main(String[] args)
                       throws IOException
    {
        // size of ArrayList
        int n = 5;
 
        //declaring ArrayList with initial size n
        ArrayList<Integer> arrli = new ArrayList<Integer>(n);
 
        // Appending the new element at the end of the list
        for (int i=1; i<=n; i++)
            arrli.add(i);
 
        // Printing elements
        System.out.println(arrli);
 
        // Remove element at index 3
        arrli.remove(3);
 
        // Displaying ArrayList after deletion
        System.out.println(arrli);
 
        // Printing elements one by one
        for (int i=0; i<arrli.size(); i++)
            System.out.print(arrli.get(i)+" ");
    }
}

HashMap
Java HashMap class implements the map interface by using a hashtable. It inherits AbstractMap class and 
implements Map interface.

The important points about Java HashMap class are:
-A HashMap contains values based on the key.
-It contains only unique elements.
-It may have one null key and multiple null values.
-It maintains no order.

import java.util.*;  
class TestCollection13{  
 public static void main(String args[]){  
  HashMap<Integer,String> hm=new HashMap<Integer,String>();  
  hm.put(100,"Amit");  
  hm.put(101,"Vijay");  
  hm.put(102,"Rahul");  
  for(Map.Entry m:hm.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 }  
}  

Set
Set is an interface which extends Collection. It is an unordered collection of objects in which duplicate values cannot be stored.
Basically, Set is implemented by HashSet, LinkedSet or TreeSet (sorted representation).
Set has various methods to add, remove clear, size, etc to enhance the usage of this interface
// Java code for adding elements in Set
import java.util.*;
public class Set_example
{
    public static void main(String[] args)
    {
        // Set deonstration using HashSet
        Set<String> hash_Set = new HashSet<String>();
        hash_Set.add("Geeks");
        hash_Set.add("For");
        hash_Set.add("Geeks");
        hash_Set.add("Example");
        hash_Set.add("Set");
        System.out.print("Set output without the duplicates");
 
        System.out.println(hash_Set);
 
        // Set deonstration using TreeSet
        System.out.print("Sorted Set after passing into TreeSet");
        Set<String> tree_Set = new TreeSet<String>(hash_Set);
        System.out.println(tree_Set);
    }
}